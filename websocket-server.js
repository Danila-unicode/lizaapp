// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫\nprocess.on( uncaughtException, (error) => {\n    log(–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: , error);\n    log(–°—Ç–µ–∫: , error);\n});\n\nprocess.on(unhandledRejection, (reason, promise) => {\n    log(–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: , error);\n});\n
const WebSocket = require('ws');
const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const https = require('https');
const http = require('http');
const fs = require('fs');
// –£–¥–∞–ª—è–µ–º mysql –∏ bcrypt - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ PHP API

const app = express();
const PORT = process.env.PORT || 9000;
const WSS_PORT = process.env.WSS_PORT || 9000;

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω—É–∂–Ω–∞ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ PHP API

// Middleware
app.use(cors({
    origin: [
        'https://lizaapp.wg01.ru',
        'https://lizamsg.ru',
        'https://89.169.141.202:3000',
        'http://localhost:3000',
        'http://localhost:8080',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:8080'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());
app.use(express.static('public'));

// SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
let httpsOptions = null;
try {
    httpsOptions = {
        key: fs.readFileSync('/home/ubuntu/ssl/key.pem'),
        cert: fs.readFileSync('/home/ubuntu/ssl/cert.pem')
    };
    console.log('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
} catch (error) {
    console.log('‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ HTTPS');
}

// HTTPS —Å–µ—Ä–≤–µ—Ä
let httpsServer = null;
if (httpsOptions) {
    httpsServer = https.createServer(httpsOptions, app);
}

// WebSocket —Å–µ—Ä–≤–µ—Ä (HTTPS –∏–ª–∏ HTTP)
const wss = httpsOptions ? 
    new WebSocket.Server({ server: httpsServer }) :
    new WebSocket.Server({ port: WSS_PORT });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const connectedUsers = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è HTTP API
const signals = new Map(); // userId -> [signals]
const userRooms = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω—É–∂–Ω–∞ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ PHP API

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const prefix = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : 'üìù';
    console.log(`[${timestamp}] ${prefix} ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
function saveSignal(from, to, type, data) {
    const signal = {
        id: Date.now(),
        timestamp: Math.floor(Date.now() / 1000),
        from,
        to,
        type,
        data
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if (!signals.has(to)) {
        signals.set(to, []);
    }
    signals.get(to).push(signal);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
    const userSignals = signals.get(to);
    if (userSignals.length > 100) {
        userSignals.splice(0, userSignals.length - 100);
    }
    
    log(`–°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${type} –æ—Ç ${from} –∫ ${to}`, 'info');
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ PHP API

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on('connection', (ws, req) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const username = url.searchParams.get("username");
    if (!username) {
        ws.close(1008, "Username required");
        return;
    }
    const userId = username;
    const clientIP = req.socket.remoteAddress;
    
    log(`–ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${userId} (IP: ${clientIP})`, 'success');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    connectedUsers.set(userId, {
        ws: ws,
        id: userId,
        state: 'idle',
        targetUser: null,
        ip: clientIP,
        connectedAt: new Date()
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ws.send(JSON.stringify({
        type: 'connected',
        username: userId,
        username: userId,
        userId: userId,
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    }));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    ws.on('message', (data) => {
        try {
            const message = JSON.parse(data);
            handleMessage(userId, message);
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${userId}: ${error.message}`, 'error');
            ws.send(JSON.stringify({
                type: 'error',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
            }));
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    ws.on('close', () => {
        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`, 'warning');
        handleDisconnect(userId);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    ws.on('error', (error) => {
        log(`–û—à–∏–±–∫–∞ WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`, 'error');
        handleDisconnect(userId);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function handleMessage(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) {
        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'error');
        return;
    }
    
    log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${message.type}`, 'info');
    
    switch (message.type) {
        case 'ping':
            handlePing(userId, message);
            break;
        case 'pong':
            handlePong(userId, message);
            break;
        case 'offer':
            handleOffer(userId, message);
            break;
        case 'answer':
            handleAnswer(userId, message);
            break;
        case 'ice-candidate':
            handleIceCandidate(userId, message);
            break;
        case 'disconnect':
            handleDisconnectSignal(userId, message);
            break;
        case 'call_rejected':
            handleCallRejected(userId, message);
            break;
        default:
            log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`, 'warning');
            user.ws.send(JSON.stringify({
                type: 'error',
                message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`
            }));
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ping
function handlePing(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    if (user.state !== 'idle') {
        log(`–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ping –æ—Ç ${userId} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${user.state}`, 'warning');
        return;
    }
    
    user.state = 'connecting';
    user.targetUser = message.to;
    
    log(`Ping –æ—Ç ${userId} –∫ ${message.to}`, 'info');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º ping —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'ping',
        from: userId,
        to: message.to,
        data: message.data
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ pong
function handlePong(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    log(`Pong –æ—Ç ${userId} –∫ ${message.to}`, 'info');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º pong —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'pong',
        from: userId,
        to: message.to,
        data: message.data
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const targetUser = connectedUsers.get(message.to);
    if (targetUser) {
        targetUser.state = 'connected';
        targetUser.targetUser = userId;
        user.state = 'connected';
        
        log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ–∂–¥—É ${userId} –∏ ${message.to}`, 'success');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ offer
function handleOffer(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    if (user.state !== 'connected') {
        log(`–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º offer –æ—Ç ${userId} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${user.state}`, 'warning');
        return;
    }
    
    log(`Offer –æ—Ç ${userId} –∫ ${message.to}`, 'info');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º offer —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'offer',
        from: userId,
        to: message.to,
        data: message.data
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ answer
function handleAnswer(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    if (user.state !== 'connected') {
        log(`–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º answer –æ—Ç ${userId} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${user.state}`, 'warning');
        return;
    }
    
    log(`Answer –æ—Ç ${userId} –∫ ${message.to}`, 'info');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º answer —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'answer',
        from: userId,
        to: message.to,
        data: message.data
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
function handleIceCandidate(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    log(`ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç ${userId} –∫ ${message.to}`, 'info');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'ice-candidate',
        from: userId,
        to: message.to,
        data: message.data
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ disconnect
function handleDisconnectSignal(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    log(`–°–∏–≥–Ω–∞–ª disconnect –æ—Ç ${userId} –∫ ${message.to}`, 'warning');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º disconnect —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'disconnect',
        from: userId,
        to: message.to,
        data: message.data
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.state = 'idle';
    user.targetUser = null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ call_rejected
function handleCallRejected(userId, message) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    log(`–°–∏–≥–Ω–∞–ª call_rejected –æ—Ç ${userId} –∫ ${message.to}`, 'warning');
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º call_rejected —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    forwardMessage(message.to, {
        type: 'call_rejected',
        from: userId,
        to: message.to,
        data: message.data
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.state = 'idle';
    user.targetUser = null;
}

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function forwardMessage(targetUserId, message) {
    const targetUser = connectedUsers.get(targetUserId);
    if (!targetUser) {
        log(`–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'warning');
        return;
    }
    
    if (targetUser.ws.readyState === WebSocket.OPEN) {
        targetUser.ws.send(JSON.stringify(message));
        log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${message.type} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç ${message.from} –∫ ${targetUserId}`, 'success');
    } else {
        log(`WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –Ω–µ –æ—Ç–∫—Ä—ã—Ç`, 'warning');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleDisconnect(userId) {
    const user = connectedUsers.get(userId);
    if (!user) return;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    if (user.targetUser) {
        const targetUser = connectedUsers.get(user.targetUser);
        if (targetUser && targetUser.ws.readyState === WebSocket.OPEN) {
            targetUser.ws.send(JSON.stringify({
                type: 'disconnect',
                from: userId,
                to: user.targetUser,
                data: { reason: 'user_disconnected' }
            }));
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            targetUser.state = 'idle';
            targetUser.targetUser = null;
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    connectedUsers.delete(userId);
    log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`, 'info');
}

// HTTP API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
    const stats = {
        connectedUsers: connectedUsers.size,
        users: Array.from(connectedUsers.values()).map(user => ({
            id: user.id,
            state: user.state,
            targetUser: user.targetUser,
            connectedAt: user.connectedAt,
            ip: user.ip
        }))
    };
    res.json(stats);
});

// HTTP API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
app.get('/api/signaling', (req, res) => {
    const { action, userId, since } = req.query;
    
    if (action === 'signals' && userId) {
        const userSignals = signals.get(userId) || [];
        const sinceTimestamp = parseInt(since) || 0;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const filteredSignals = userSignals.filter(signal => 
            signal.timestamp > sinceTimestamp
        );
        
        log(`–ó–∞–ø—Ä–æ—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è ${userId}: –Ω–∞–π–¥–µ–Ω–æ ${filteredSignals.length} –∏–∑ ${userSignals.length}`, 'info');
        
        res.json({
            success: true,
            signals: filteredSignals,
            total: userSignals.length,
            new: filteredSignals.length
        });
    } else if (action === 'delete' && userId) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        signals.delete(userId);
        log(`–í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, 'info');
        res.json({ success: true, message: '–°–∏–≥–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã' });
    } else if (action === 'getUsers') {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PHP API
        res.json({
            success: false,
            error: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ WebSocket API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
        });
    } else {
        res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞' });
    }
});

// HTTP API –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Yandex Cloud Functions)
app.post('/api/signaling', (req, res) => {
    const { action, from, to, type, data } = req.body;
    
    log(`HTTP —Å–∏–≥–Ω–∞–ª–∏–Ω–≥: ${action} –æ—Ç ${from} –∫ ${to}`, 'info');
    
    switch (action) {
        case 'register':
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PHP API
            res.status(400).json({ 
                success: false, 
                error: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebSocket API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PHP API.' 
            });
            break;
            
        case 'login':
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PHP API
            res.status(400).json({ 
                success: false, 
                error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebSocket API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PHP API.' 
            });
            break;
            
        case 'ping':
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ping —Å–∏–≥–Ω–∞–ª
                log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º ping –æ—Ç ${from} –∫ ${to}`, 'info');
                saveSignal(from, to, 'ping', data);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º pong –æ–±—Ä–∞—Ç–Ω–æ
                log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º pong –æ—Ç ${to} –∫ ${from}`, 'info');
                saveSignal(to, from, 'pong', { 
                    timestamp: Date.now(),
                    originalPing: data 
                });
                
                log(`Ping –æ—Ç ${from} –∫ ${to} - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω pong`, 'info');
                res.json({ success: true, message: 'Ping –æ–±—Ä–∞–±–æ—Ç–∞–Ω, pong –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
            } catch (error) {
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ping: ${error.message}`, 'error');
                res.json({ success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ping' });
            }
            break;
            
        case 'signal':
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            saveSignal(from, to, type, data);
            res.json({ success: true, message: '–°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
            break;
            
        default:
            res.json({ success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
});

// HTTP API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PHP API

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
    if (httpsOptions && httpsServer) {
        // HTTPS —Ä–µ–∂–∏–º
        httpsServer.listen(PORT, "0.0.0.0", () => {
            log(`HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`, 'success');
            log(`WSS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${WSS_PORT}`, 'success');
            log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: https://lizamsg.ru:${PORT}/api/stats`, 'info');
            log(`WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: wss://lizamsg.ru:${WSS_PORT}`, 'info');
        });
    } else {
        // HTTP —Ä–µ–∂–∏–º (fallback)
        app.listen(PORT, "0.0.0.0", () => {
            log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`, 'success');
            log(`WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${WSS_PORT}`, 'success');
            log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/stats`, 'info');
        });
    }
}

startServer();

// Graceful shutdown
process.on('SIGINT', () => {
    log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...', 'warning');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connectedUsers.forEach((user) => {
        if (user.ws.readyState === WebSocket.OPEN) {
            user.ws.close();
        }
    });
    
    wss.close(() => {
        log('WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
        if (httpsServer) {
            httpsServer.close(() => {
                log('HTTPS —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
                process.exit(0);
            });
        } else {
            process.exit(0);
        }
    });
});
